"""
-------------------------------------------------------------------------------

Tim Gormly
1/23/2023
44-608 Data Analytics Fundamentals
Module 2

-------------------------------------------------------------------------------

This script will define a PyBuddy class that describes the statistics of a single
hockey player

The hockey player statistics include a few attributes:
    team ------------ string, selected at random from a list
    position -------- Position enum type
    salary ---------- int
    shots ----------- int
    goals ----------- int
    accuracy -------- float (goals / shots) - generated by a PyBuddy method
    hits ------------ int
    penalty_minutes - int

This class will have several methods
    - some methods will be to assist in formatting and displaying outputs
    - there will be a method for PyBuddy to display some of the the player's stats
    - there will be a method to simulate a new contract.
        - the player will maintain their position, but will be randomly assigned
            a new salary and possibly a new team

-------------------------------------------------------------------------------
"""

#import modules
from dataclasses import dataclass, field
from enum import Enum
import datetime
import random
import statistics

class Species(Enum):
    DOG = 1
    CAT = 2
    ELF = 3
    ORC = 4

# define class that contains different positions
class Position(Enum):
    Center = 1
    LeftWing = 2
    RightWing = 3
    Defense = 4

# instantiate the list of teams
# each team is represented as a tuple as (city, team name)
teams = (
    ('St Louis', 'Blues'),
    ('Carolina', 'Hurricanes'),
    ('Columbus', 'Blue Jackets'),
    ('New Jersey', 'Devils'),
    ('New York', 'Islanders'),
    ('New York', 'Rangers'),
    ('Philadelphia', 'Flyers'),
    ('Pittsburgh', 'Penguins'),
    ('Washington', 'Capitals'),
    ('Boston', 'Bruins'),
    ('Buffalo', 'Sabres'),
    ('Detroit', 'Red Wings'),
    ('Florida', 'Panthers'),
    ('Montreal', 'Canadiens'),
    ('Ottawa', 'Senators'),
    ('Tampa Bay', 'Lightning'),
    ('Toronto', 'Maple Leafs'),
    ('Arizona', 'Coyotes'),
    ('Chicago', 'Blackhawks'),
    ('Colorado', 'Avalanche'),
    ('Dallas', 'Stars'),
    ('Minnesota', 'Wild'),
    ('Nashville', 'Predators'),
    ('St Louis', 'Blues'),
    ('Winnipeg', 'Jets'),
    ('Anaheim', 'Ducks'),
    ('Calgary', 'Flames'),
    ('Edmonton', 'Oilers'),
    ('Los Angeles', 'Kings'),
    ('San Jose', 'Sharks'),
    ('Seattle', 'Kraken'),
    ('Vancouver', 'Canucks'),
    ('Vegas', 'Golden Knights'),
)


def populate_list_of_goals():
    '''this will be used by PyBuddy to generate a list of goals for its hockey player
    I want to make this method exist within the class itself, and then be called
    when the class constructor is called, but I'm not sure how.'''
    #initiate an empty list to be populated
    goals = []

    # use a for loop to populate the list
    for i in range(82):
        goals.append(random.randint(0,4))
    return goals

def generate_salary():
    '''this will be used to create a salary for the player.  This is also a method
    I would like to make exist within the class itself, but I'm not sure how'''
    return 600_000 * random.randint(1, 10)

class PyBuddy:
    """ PyBuddy class for creating a study buddy."""

    def __init__(self, name, species, num_legs, weight_kgs, is_available, skill_list):
        """ Built-in method to create a new instance."""
        self.name = name
        self.species = species
        self.num_legs = num_legs
        self.weight_kgs = weight_kgs
        self.is_available = is_available
        self.skill_list = skill_list
        self.create_date = datetime.datetime.now()
        
        # add fields that represent a hockey player's stats
        self.player_name = "John Doe"

        self.team = teams[random.randint(0, 31)]

        # choose a position at random
        self.position = Position.value = random.randint(1, 4)

        # generate the player's salary
        self.salary = generate_salary()

        # populate a list that represents goals scored by the player, one entry per game
        # list is populated by populate_list_of_goals
        self.goals = populate_list_of_goals()

        # populate a total number of shots, a random amount larger than the player's
        # total goals
        self.shots = sum(self.goals) + random.randint(1, 100)

        self.hits = random.randint(0, 100)

        self.penalty_minutes = random.randint(0, 75) * 2



    def __str__(self):
        """Built-in method to return a string describing this instance"""
        s0 = f"I'm {self.name}.\n"
        s1 = f"I'm a {self.species} with {self.num_legs} legs.\n"
        s2 = f"I weigh {self.weight_kgs:.2f} kgs.\n"
        s3 = f"I've been alive for {self.get_age_string()}.\n"

        if self.is_available:
            s4 = "I'm available for tutoring.\n"
        else:
            s4 = "I'm already helping others learn Python.\n"

        s5 = "I know:\n"

        s6 = ""
        for skill in self.skill_list:
            s6 = s6 + f"  - {skill}\n"


        s = s0 + s1 + s2 + s3 + s4 + s5 + s6
        return s

    def get_age_string(self):
        """Return the age as a string."""
        start = self.create_date
        end = datetime.datetime.now()
        duration = end - start
        ageString = str(duration)
        return ageString

    def display_welcome(self):
        print()
        print("Welcome, I'm a new PyBuddy.\n")
        # print using our built-in to string method
        print(self.__str__())

        final_message = """

        You'll need curiousity, the ability to search the web,
        and the tenacity and resourcefulness
        to solve all kinds of challenges.

        Let's get started!

        Today, I'm going to tell you about a hockey player, {self.player_name}"
        """
        print(final_message)
    
    def calculate_accuracy(self):
        """this method uses the goals and shots from the hockey player and
        calculates the players accuracy"""
        return float(sum(self.goals) / self.shots) * 100

    def calculate_mean_goals(self):
        """this will return the mean of the players scored goals, showing their
        mean goals scored per game"""
        return statistics.mean(self.goals)

    def new_contract(self):
        """This will reset the player's team and salary, as though they have
        signed onto a new contract with a new team"""
        self.salary = generate_salary()
        self.team = teams[random.randint(0, 31)]
        print("BREAKING NEWS!!")
        print(f"{self.player_name} has a new contract!  Now they play for {self.team}, earning ${self.salary:,} per year")

    def display_statistics(self):
        """PyBuddy will use this to tell the user about the player"""
        s = ""

        s0 = f"Name: {self.player_name}\n"
        s1 = f"Team: {self.team}\n"
        s2 = f"Position: {self.position}\n"
        s3 = f"Salary: ${self.salary:,} per year\n"
        s4 = "--------------------------------\n"
        s5 = f"Shots: {self.shots}\n"
        s6 = f"Goals: {sum(self.goals)}\n"
        s7 = f"Accuracy: {self.calculate_accuracy():.2f}%\n"

        if (self.calculate_accuracy() > 75):
            s7 += "(wow they're good!!)\n"

        s8 = f"Hits: {self.hits}\n"
        s9 = f"Penalty Minutes: {self.penalty_minutes}\n"
        s10 = "--------------------------------\n"
        s11 = f"Mean goals scored each game: {self.calculate_mean_goals():3.3}\n"

        s = s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11
        print(s)

# -------------------------------------------------------------
# Call some functions and execute code!

# if this is the main file being run

if __name__ == "__main__":
    # Create an instance of a PyBuddy
    alice = PyBuddy(
        "Alice",
        Species.CAT,
        4,
        8.123456,
        True,
        ["Git", "GitHub", "Python", "Markdown", "VS Code"],
    )

    # Call the buddy's welcome() method
    alice.display_welcome()

    alice.display_statistics()

    alice.new_contract()